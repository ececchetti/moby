Problem: we want to allow our World programs to do imperative things,
since mashups typically use imperative APIs.  By imperative, we mean
a void-function of the type:

   X Y ... -> void

which will typically mutate the argument values.  We can't directly
call these in Beginner/Intermediate-level Scheme because they produce
no values.

However, we've already got some infrastructure for doing side-effects
by using world-with-effects.  The following proposed API extends
world-with-effects to support imperative update.

======================================================================

API


    > make-store-var: -> store-var

    Creates a unique store variable that is used to key into a store.


    > store-ref: store store-var -> X

    Consumes the store and a key, and returns the associated value.


    > store-set: store store-var X -> effect

    Consumes a store, a store variable, and a value, and produces an
    effect.  When the effect is applied, it mutates the store.


    > effect-with-store: (world store -> effect) -> effect

    Consumes a function that produces a effect in the context of a
    store.When a sequence-with-store effect is applied, it initializes
    the store to empty and then applies the sub-effect.


    > void-function->effect-function: (X Y ... -> void) -> (X Y ... -> effect)

    Given a function that has a side effect, produces a effect-producing function.


    > effect-function->void-function: (X Y ... -> effect) -> (X Y ... -> void)

    Given a function that produces an effect, produces a void-function.




======================================================================

Example: Google Maps


Google Maps has the following API (simplified) in Javascript:

   make-map: () -> map
   set-center!: map number number -> void
   gevent-add-listener!: map string (number number -> void) -> void


i.e., in JS, we write the following:

   var map = makeMap();
   setCenter(map, 42, -71);
   gEventAddListener(map, "dblclick", 
                      function(lat, lng) {
                          alert(lat + ", " + lng);
                      });


We assume that we'll have a function js-get-obj:

    js-get-obj: string -> X



We write the corresponding world program and the initial effect as:

   (define map (make-store-var))

   (define make-map (js-get-obj "makeMap"))
   (define set-center-effect
      (void-function->effect-function (js-get-obj "setCenter")))
   (define gevent-add-listener-effect 
     (void-function->effect-function (js-get-obj "gEventAddListener")))
   (define alert-void-function (effect-function->void-function 
                                 (lambda (lat lng)
                                   (make-effect:alert (format "~a, ~a" lat lng)))))

   (big-bang ...
             (initial-effect

               (effect-with-store
                 (lambda (w s)
                    (list (store-set s map (make-map))
                          (set-center-effect (store-ref s map) 42 -71)
                          (gevent-add-listener-effect (store-ref s map) 
                                                      "dblclick"
                                                      alert-void-function))))))


We can compare this to imperative Scheme:

   (define make-map (js-get-obj "makeMap"))
   (define set-center! (js-get-obj "setCenter"))
   (define gevent-add-listener! (js-get-obj "gEventAddListener"))

   (define map false)

   (begin
     (set! map (make-map))
     (set-center! map 42 -17)
     (gevent-add-listener! map 
                           "dblclick"
                           (lambda (lat lng)
                             (alert (format "~a, ~a" lat lng)))))




======================================================================

Observations from the Maps example:

    var map = makeMap();
    setCenter(map, 42, -71);
    gEventAddListener(map, "dblclick", 
                      function(lat, lng) {
                          alert(lat + ", " + lng);
                      });


    1.  All the bang-ed functions (set-center!, gevent-add-listener!)
    return void.

    2.  Furthermore, these functions mutate their arguments, and have
    no effect on the world.

    3.  Finally, gevent-add-listener! is higher order: it consumes a
    function that returns void.



From Observation 2, we need to represent a store that can be accessed
and mutated.  We define a 'store' type, but we make sure that the user
cannot construct an instance of a store outside of the context of an
effect.  This motivates the definition of sequence-with-effects, which
constructs an effect that introduces the store that can be manipulated
by the effects within its context.


From Observation 1, we want Effects in the World framework to call a
sequence of these void-functions.  We provide a wrapper
void-function->effect-function that consumes void functions and turns
them into effect functions.


From Observation 3, we want to put a higher-order function value there
whose return value is void.  In our framework, a void function is one
that produces an effect.  Since JS expects functions that go to void,
we provide another wrapper effect->function->void-function that acts
as an inverse to void-function->effect-function.
